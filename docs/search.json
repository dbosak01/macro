[{"path":"https://macro.r-sassy.org/articles/macro-example1.html","id":"create-a-simple-listing","dir":"Articles","previous_headings":"","what":"Create a Simple Listing","title":"Example 1: Listing","text":"example regulatory-style listing using reporter iris sample data frame. Notice write_report() function breaks page automatically appropriately: Next: Example 2: Table","code":"library(reporter)  # Create temp file name tmp <- file.path(tempdir(), \"example1.pdf\")  # Create the report rpt <- create_report(tmp, orientation = \"portrait\", output_type = \"PDF\") %>%   page_header(left = \"Client: 1-800-Flowers\", right = \"Study: Iris\") %>%   titles(\"Listing 1.0\", \"IRIS Data Listing\") %>%   add_content(create_table(iris)) %>%   footnotes(\"* Bulletin of the American Iris Society, 1935\") %>%   page_footer(left = Sys.time(),               center = \"Confidential\",               right = \"Page [pg] of [tpg]\")  # Write the report write_report(rpt)  # file.show(tmp)"},{"path":"https://macro.r-sassy.org/articles/macro-example2.html","id":"create-a-simple-listing","dir":"Articles","previous_headings":"","what":"Create a Simple Listing","title":"Example 2: Table","text":"example regulatory-style listing using reporter iris sample data frame. Notice write_report() function breaks page automatically appropriately:","code":"library(reporter)  # Create temp file name tmp <- file.path(tempdir(), \"example1.pdf\")  # Create the report rpt <- create_report(tmp, orientation = \"portrait\", output_type = \"PDF\") %>%   page_header(left = \"Client: 1-800-Flowers\", right = \"Study: Iris\") %>%   titles(\"Listing 1.0\", \"IRIS Data Listing\") %>%   add_content(create_table(iris)) %>%   footnotes(\"* Bulletin of the American Iris Society, 1935\") %>%   page_footer(left = Sys.time(),               center = \"Confidential\",               right = \"Page [pg] of [tpg]\")  # Write the report write_report(rpt)  # file.show(tmp)"},{"path":"https://macro.r-sassy.org/articles/macro-faq.html","id":"top","dir":"Articles","previous_headings":"","what":"Index","title":"Frequently Asked Questions","text":"create macro package? capabilities macro package provide? macro package work? Can create macro functions loops? Can nest macro conditionals? %include work? can use package generate code?","code":""},{"path":[]},{"path":"https://macro.r-sassy.org/articles/macro-faq.html","id":"motivation","dir":"Articles","previous_headings":"Content","what":"Why did you create the macro package?","title":"Frequently Asked Questions","text":"Q: R already meta-programming capabilities. want create macro programming capability? : macro package motivated specifically code generation. goal generate program variable values resolved, desired conditional code included final program. result requires pre-processing text replacement capability lacking R. macro package fills need. top","code":""},{"path":"https://macro.r-sassy.org/articles/macro-faq.html","id":"capabilities","dir":"Articles","previous_headings":"Content","what":"What capabilities does the macro package provide?","title":"Frequently Asked Questions","text":"Q: seems R macro package provides less features SAS. capabilities provide? : macro package supports following features: Macro Comments Macro Variables Macro Conditions Macro System Function Macro Include features essential features SAS macro language, missing R. features needed primary use case code generation, better handled using standard R code. top","code":""},{"path":"https://macro.r-sassy.org/articles/macro-faq.html","id":"how","dir":"Articles","previous_headings":"Content","what":"How does the macro package work?","title":"Frequently Asked Questions","text":"Q: don’t quite get . supposed use package? : macro-enabled R program standard R program, macro commands added code comments. special comments act pre-processor directives. directives resolved pre-processor function msource(). write macro enabled program, run msource() function instead source() function. Normally, command line. default, msource() function run currently selected program RStudio. Otherwise, pass name program want run first parameter msource(). function pre-process program, resolve macro statements, execute resolved code. top","code":""},{"path":"https://macro.r-sassy.org/articles/macro-faq.html","id":"function","dir":"Articles","previous_headings":"Content","what":"Can I create macro functions and do loops?","title":"Frequently Asked Questions","text":"Q: want create macro function. macro package support ? macro loops? : . Base R provides true function capabilities, nothing gained replicating capability macro functions. Likewise loops, already extensive features Base R Tidyverse looping. recommended use existing features. top","code":""},{"path":"https://macro.r-sassy.org/articles/macro-faq.html","id":"nest","dir":"Articles","previous_headings":"Content","what":"Can I nest macro conditionals?","title":"Frequently Asked Questions","text":"Q: complicated set conditions nested several levels deep. Can macro package? : Yes. package supports nest conditionals. limit number nested levels. top","code":""},{"path":"https://macro.r-sassy.org/articles/macro-faq.html","id":"include","dir":"Articles","previous_headings":"Content","what":"How does %include work?","title":"Frequently Asked Questions","text":"Q: see documentation “%include” macro function. work? SAS? : Yes. “#%include” macro function replicates basic functionality SAS “%include”. Text included file extracted inserted generated file. macro statements included code resolved normally. top","code":""},{"path":"https://macro.r-sassy.org/articles/macro-faq.html","id":"generate","dir":"Articles","previous_headings":"Content","what":"How can I use this package to generate code?","title":"Frequently Asked Questions","text":"Q: documentation mention macro package can used code generator. work? : code generation, simply supply output path second parameter msource(). second parameter supplied, function create temporary output file. second parameter supplied, function output resolved code specified path. file generated code. advantages using macro package code generation : easy combine code several files using “#%include” command. code inside TRUE macro conditions emitted output file. feature makes resolved code compact easier read. Macro variables resolved actual variable value, instead variable name. instance, macro variable file path resolve actual path, instead just variable name. feature also makes code easier read understand. can write macro program emitted code runs independently, without dependencies external packages, systems, functions. feature makes generated code self-contained, portable, totally transparent. top","code":""},{"path":"https://macro.r-sassy.org/articles/macro.html","id":"macro-concept","dir":"Articles","previous_headings":"","what":"Macro Concept","title":"macro","text":"macro language like meta-language code. meta-language runs first, generates regular code, regular code executed produce sort output. SAS® macro language commonly used SAS programs. R macro package inspired SAS.","code":""},{"path":"https://macro.r-sassy.org/articles/macro.html","id":"an-r-macro-language","dir":"Articles","previous_headings":"","what":"An R Macro Language","title":"macro","text":"Clearly, macro language R SAS macro language. SAS macro language built SAS execution environment. SAS pre-processor run automatically, macro syntax understood SAS syntax checker. R, none applies. R built-macro language, built-pre-processor, R syntax checker expect sort macro language syntax. Therefore, build macro-like functionality R, must get little creative.","code":""},{"path":"https://macro.r-sassy.org/articles/macro.html","id":"macro-statements","dir":"Articles","previous_headings":"","what":"Macro Statements","title":"macro","text":"first thing note macro statements macro package written code comments. comments ensure R syntax checker generate error reading macro functions. SAS, macro functions prefixed percent sign (%). R, macro statements therefore prefixed comment symbol (#) percent sign (%). simple macro assignment looks like : simple macro conditional looks like : Note R macro syntax identical SAS syntax. syntax blend SAS R syntax, inside macro comment.","code":"#% Assign the macro variable \"x\" #%let x = 1 #%if (x. == 1)   print(\"x is one!\") #%else   print(\"x is something else!\") #%end"},{"path":"https://macro.r-sassy.org/articles/macro.html","id":"the-msource-function","dir":"Articles","previous_headings":"","what":"The msource() function","title":"macro","text":"macro package, pre-processing macro code accomplished special function: msource(). msource() function similar “source()” function R. msource() function execute code, just like “source()” function. First, however, execute macro pre-processor. steps can summarized follows: Step 1: Pre-process code resolve macro language syntax. Step 2: Generate new code file resolved code. Step 3: Execute resolved code “source()” function. Notice steps map directly way SAS macro processor works. addition, R macro language text-replacement language, just like SAS. Macro variables swapped real values text replacements. Macro conditions evaluated, code TRUE macro conditions executed. handled msource() function. msource() fact user-facing function macro package.","code":""},{"path":"https://macro.r-sassy.org/articles/macro.html","id":"available-functionality","dir":"Articles","previous_headings":"The msource() function","what":"Available Functionality","title":"macro","text":"macro package supports following functionality: Macro Comments: Like regular R comments, emitted output file. Macro Variables: Allow assign value macro variable, use macro variable text replacement token. Macro Conditionals: --Else logic allows conditionally execute chunk code. System Function: system function allows execute R functions operators part macro statement.","code":""},{"path":[]},{"path":"https://macro.r-sassy.org/articles/macro.html","id":"macro-variables","dir":"Articles","previous_headings":"The msource() function > Available Functionality","what":"Macro Variables","title":"macro","text":"saw simple macro variable assignment. Macro variables defined keyword #%let variable name value. macro variable assignments different data types: macro variable assigned, can used text replacement token anywhere program. example, can use macro assignments like :","code":"#% Assign integer value  #%let x = 1  #% Assign double value #%let x = 1.2  #% Assign character value #%let x = \"Hello World!\"  #% Assign date value #%let x = as.Date(\"2025-07-15\")  #% Assign vector #%let x = c(1, 2, 3, 4, 5)  #% Assign calculated value #%let x = 2 + 2  #% Assign using another macro variable #%let y = x.  #% Calculate using another macro variable #%let y = x. + 1"},{"path":"https://macro.r-sassy.org/articles/macro.html","id":"simple-macro-conditionals","dir":"Articles","previous_headings":"The msource() function > Available Functionality","what":"Simple Macro Conditionals","title":"macro","text":"Macro conditionals allows conditionally execute chunk code. macro condition TRUE, code inside condition output generated code file executed. Code inside macro conditions FALSE output generated code file. words, code desired output generated code file. feature makes code file compact easy read. examples simple macro conditions: executed msource(), code generate result \"Inside first condition\". pass file name file_out parameter msource() function, code file generated. code fill contain following content: Notice spacing comments inside condition preserved. Also notice macro code code inside conditions removed. feature allows generate efficient readable code files minimal effort.","code":"#% Assign integer value  #%let x = 1  #%if (x. == 1)   # X is one   print(\"Inside the first condition\") #%elseif (x. == 2)   # X is two   print(\"Inside the second condition\") #%else    # X is something else   print(\"Inside the else.\") #%end # X is one   print(\"Inside the first condition\")"},{"path":"https://macro.r-sassy.org/articles/macro.html","id":"nested-macro-conditionals","dir":"Articles","previous_headings":"The msource() function > Available Functionality","what":"Nested Macro Conditionals","title":"macro","text":"Note can also nest macro conditionals. example illustrates conditionals: result code “X one Y 2”. ","code":"#% Assign integers #%let x = 1 #%let y = 2  #%if (x. == 1)    #%if (y. == 1)      print(\"X is one and Y is 1\")    #%else      print(\"X is one and Y is y.\")    #%end  #%elseif (x. == 2)      #%if (y. == 1)      print(\"X is two and Y is 1\")      #%else      print(\"X is two and Y is y.\")      #%end  #%else    #%if (y. == 1)      print(\"X is x. and Y is 1\")    #%else      print(\"X is x. and Y is y.\")    #%end  #%end"},{"path":[]},{"path":[]},{"path":"https://macro.r-sassy.org/articles/macro.html","id":"disclaimer","dir":"Articles","previous_headings":"The msource() function","what":"Disclaimer","title":"macro","text":"macro package used substitute normal R variables conditions. general, R macro facility used sparingly. scenarios R macro facility advantageous. primary scenario macro package written code generation. scenario, macro capability allows easily produce resolved code file can saved run independently. easier produce resolved program using macro language alternative methods. scenario macro package may useful translation programs SAS. R macro syntax can translated quite directly SAS, without rethink logic. Outside two scenarios, using R macros must carefully considered, can introduce unnecessary complexity make code harder debug.","code":""},{"path":"https://macro.r-sassy.org/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"David Bosak. Author, maintainer. Duong Tran. Contributor.","code":""},{"path":"https://macro.r-sassy.org/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Bosak D (2025). macro: Macro Pre-processor 'R' Programs. R package version 0.1.1, https://github.com/dbosak01/macro, https://macro.r-sassy.org.","code":"@Manual{,   title = {macro: A Macro Pre-processor for 'R' Programs},   author = {David Bosak},   year = {2025},   note = {R package version 0.1.1, https://github.com/dbosak01/macro},   url = {https://macro.r-sassy.org}, }"},{"path":"https://macro.r-sassy.org/index.html","id":"introduction-to-macro","dir":"","previous_headings":"","what":"A Macro Pre-processor for R Programs","title":"A Macro Pre-processor for R Programs","text":"SAS R programming languages different. One major differences SAS “macro” language, R . SAS macro language provides code pre-processor allows text-based substitution manipulation code executed. Normally, R, facility needed. times, however, handy capability. macro package provides capability. macro package offers basic “macro” functionality: Assigning macro variables. Conditional macro logic. Macro loops. Firstly, macro package provide consolation SAS programmers transitioning R accustomed working SAS macro language. Secondly, macro functionality allows perform operations can messy perform natively R. instance, macro functions great dynamic code generation. additional reading, examples, complete function reference, refer macro documentation site .","code":""},{"path":"https://macro.r-sassy.org/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"A Macro Pre-processor for R Programs","text":"install macro package, may running following command R console: put following line top script: macro package loaded, available use project.","code":"install.packages(\"macro\") library(macro)"},{"path":"https://macro.r-sassy.org/index.html","id":"getting-help","dir":"","previous_headings":"","what":"Getting Help","title":"A Macro Pre-processor for R Programs","text":"need help macro package, best place turn macro web site. web site offers many examples, full documentation every function. want look code macro package, visit github page . encounter bug feature request, please submit issue ","code":""},{"path":"https://macro.r-sassy.org/index.html","id":"see-also","dir":"","previous_headings":"","what":"See Also","title":"A Macro Pre-processor for R Programs","text":"macro package part sassy meta-package. sassy meta-package includes several packages help make R easier SAS® programmers. can read sassy package .","code":""},{"path":[]},{"path":"https://macro.r-sassy.org/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"CC0 1.0 Universal","title":"CC0 1.0 Universal","text":"CREATIVE COMMONS CORPORATION LAW FIRM PROVIDE LEGAL SERVICES. DISTRIBUTION DOCUMENT CREATE ATTORNEY-CLIENT RELATIONSHIP. CREATIVE COMMONS PROVIDES INFORMATION “-” BASIS. CREATIVE COMMONS MAKES WARRANTIES REGARDING USE DOCUMENT INFORMATION WORKS PROVIDED HEREUNDER, DISCLAIMS LIABILITY DAMAGES RESULTING USE DOCUMENT INFORMATION WORKS PROVIDED HEREUNDER.","code":""},{"path":"https://macro.r-sassy.org/LICENSE.html","id":"statement-of-purpose","dir":"","previous_headings":"","what":"Statement of Purpose","title":"CC0 1.0 Universal","text":"laws jurisdictions throughout world automatically confer exclusive Copyright Related Rights (defined ) upon creator subsequent owner(s) (, “owner”) original work authorship /database (, “Work”). Certain owners wish permanently relinquish rights Work purpose contributing commons creative, cultural scientific works (“Commons”) public can reliably without fear later claims infringement build upon, modify, incorporate works, reuse redistribute freely possible form whatsoever purposes, including without limitation commercial purposes. owners may contribute Commons promote ideal free culture production creative, cultural scientific works, gain reputation greater distribution Work part use efforts others. /purposes motivations, without expectation additional consideration compensation, person associating CC0 Work (“Affirmer”), extent owner Copyright Related Rights Work, voluntarily elects apply CC0 Work publicly distribute Work terms, knowledge Copyright Related Rights Work meaning intended legal effect CC0 rights. Copyright Related Rights. Work made available CC0 may protected copyright related neighboring rights (“Copyright Related Rights”). Copyright Related Rights include, limited , following: right reproduce, adapt, distribute, perform, display, communicate, translate Work; moral rights retained original author(s) /performer(s); publicity privacy rights pertaining person’s image likeness depicted Work; rights protecting unfair competition regards Work, subject limitations paragraph 4(), ; rights protecting extraction, dissemination, use reuse data Work; database rights (arising Directive 96/9/EC European Parliament Council 11 March 1996 legal protection databases, national implementation thereof, including amended successor version directive); similar, equivalent corresponding rights throughout world based applicable law treaty, national implementations thereof. Waiver. greatest extent permitted , contravention , applicable law, Affirmer hereby overtly, fully, permanently, irrevocably unconditionally waives, abandons, surrenders Affirmer’s Copyright Related Rights associated claims causes action, whether now known unknown (including existing well future claims causes action), Work () territories worldwide, (ii) maximum duration provided applicable law treaty (including future time extensions), (iii) current future medium number copies, (iv) purpose whatsoever, including without limitation commercial, advertising promotional purposes (“Waiver”). Affirmer makes Waiver benefit member public large detriment Affirmer’s heirs successors, fully intending Waiver shall subject revocation, rescission, cancellation, termination, legal equitable action disrupt quiet enjoyment Work public contemplated Affirmer’s express Statement Purpose. Public License Fallback. part Waiver reason judged legally invalid ineffective applicable law, Waiver shall preserved maximum extent permitted taking account Affirmer’s express Statement Purpose. addition, extent Waiver judged Affirmer hereby grants affected person royalty-free, non transferable, non sublicensable, non exclusive, irrevocable unconditional license exercise Affirmer’s Copyright Related Rights Work () territories worldwide, (ii) maximum duration provided applicable law treaty (including future time extensions), (iii) current future medium number copies, (iv) purpose whatsoever, including without limitation commercial, advertising promotional purposes (“License”). License shall deemed effective date CC0 applied Affirmer Work. part License reason judged legally invalid ineffective applicable law, partial invalidity ineffectiveness shall invalidate remainder License, case Affirmer hereby affirms () exercise remaining Copyright Related Rights Work (ii) assert associated claims causes action respect Work, either case contrary Affirmer’s express Statement Purpose. Limitations Disclaimers. trademark patent rights held Affirmer waived, abandoned, surrendered, licensed otherwise affected document. Affirmer offers Work -makes representations warranties kind concerning Work, express, implied, statutory otherwise, including without limitation warranties title, merchantability, fitness particular purpose, non infringement, absence latent defects, accuracy, present absence errors, whether discoverable, greatest extent permissible applicable law. Affirmer disclaims responsibility clearing rights persons may apply Work use thereof, including without limitation person’s Copyright Related Rights Work. , Affirmer disclaims responsibility obtaining necessary consents, permissions rights required use Work. Affirmer understands acknowledges Creative Commons party document duty obligation respect CC0 use Work.","code":""},{"path":"https://macro.r-sassy.org/reference/macro.html","id":null,"dir":"Reference","previous_headings":"","what":"A Macro Pre-processor for 'R' Programs — macro","title":"A Macro Pre-processor for 'R' Programs — macro","text":"macro package contains function preprocess R scripts, output resolved code file.  Pre-processor commands implemented special comments.","code":""},{"path":"https://macro.r-sassy.org/reference/macro.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"A Macro Pre-processor for 'R' Programs — macro","text":"macro package attempts create macro language R similar SAS® macro language. one function package: msource.  function acts substitute Base R source function.  difference msource first runs pre-processor resolve macro statements. resolved macro statements emitted separate file.  msource function sources file normally. default, pre-processor output written temporary location, deleted operation complete.  desired, may also supply path save file location choosing.","code":""},{"path":"https://macro.r-sassy.org/reference/macro.html","id":"macro-commands","dir":"Reference","previous_headings":"","what":"Macro Commands","title":"A Macro Pre-processor for 'R' Programs — macro","text":"Macro commands implemented special form R comment. special comments begin \"#%\".  example, macro include written #%include '\\{html}{\\{<path>}}'. macro features supported system: Macro Comments: comment just macro statements. Macro Variables: Initialize macro variables used text replacement tokens. Macro Conditionals: Emit code conditionally pre-processing. Macro System Command: Interact standard R functions macro code. Macro Include: Insert code external files program. features give simple yet flexible way perform meta-programming. way, macro package can useful several situations, notably code generation. See msource function documentation additional details.","code":""},{"path":[]},{"path":"https://macro.r-sassy.org/reference/macro.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"A Macro Pre-processor for 'R' Programs — macro","text":"Maintainer: David Bosak dbosak01@gmail.com contributors: Duong Tran trand000@aol.com [contributor]","code":""},{"path":"https://macro.r-sassy.org/reference/msource.html","id":null,"dir":"Reference","previous_headings":"","what":"Preprocess and Source — msource","title":"Preprocess and Source — msource","text":"msource function runs macro preprocessor executes program normally.","code":""},{"path":"https://macro.r-sassy.org/reference/msource.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Preprocess and Source — msource","text":"","code":"msource(pth = Sys.path(), file_out = NULL, envir = globalenv(), ...)"},{"path":"https://macro.r-sassy.org/reference/msource.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Preprocess and Source — msource","text":"pth path R program source. file_out want save view generated code msource function, supply full path file name parameter. Default NULL. NULL, function create temp file generated code. envir environment used program execution. Default global environment. ... Follow-parameters source function. See source function additional information.","code":""},{"path":"https://macro.r-sassy.org/reference/msource.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Preprocess and Source — msource","text":"path sourced program.","code":""},{"path":"https://macro.r-sassy.org/news/index.html","id":"macro-011","dir":"Changelog","previous_headings":"","what":"macro 0.1.1","title":"macro 0.1.1","text":"Add %loop. Add documentation.","code":""},{"path":"https://macro.r-sassy.org/news/index.html","id":"macro-010","dir":"Changelog","previous_headings":"","what":"macro 0.1.0","title":"macro 0.1.0","text":"Initial build .","code":""}]
